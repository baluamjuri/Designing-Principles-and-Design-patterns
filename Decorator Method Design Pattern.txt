Decorator Method Design Pattern
	Allows behavior to be added to an individual object, dynamically, without affecting the behavior of other instances of the same class
	It follows the open/closed principle, as new decorators can be added without modifying existing code

Key Components:
	Component Interface
	Concrete Component
	Decorator
	Concrete Decorator	

Example
	//Component Interface(Coffee)
	public interface Coffee {
		String getDescription();
		double getCost();
	}

	//ConcreteComponent(PlainCoffee)
	public class PlainCoffee implements Coffee {
		@Override
		public String getDescription() {
			return "Plain Coffee";
		}

		@Override
		public double getCost() {
			return 2.0;
		}
	}

	//Decorator(CoffeeDecorator)
	public abstract class CoffeeDecorator implements Coffee {
		protected Coffee decoratedCoffee;

		public CoffeeDecorator(Coffee decoratedCoffee) {
			this.decoratedCoffee = decoratedCoffee;
		}

		@Override
		public String getDescription() {
			return decoratedCoffee.getDescription();
		}

		@Override
		public double getCost() {
			return decoratedCoffee.getCost();
		}
	}
	
	//ConcreteDecorators(MilkDecorator,SugarDecorator)
	// MilkDecorator.java
	public class MilkDecorator extends CoffeeDecorator {
		public MilkDecorator(Coffee decoratedCoffee) {
			super(decoratedCoffee);
		}

		@Override
		public String getDescription() {
			return decoratedCoffee.getDescription() + ", Milk";
		}

		@Override
		public double getCost() {
			return decoratedCoffee.getCost() + 0.5;
		}
	}

	// SugarDecorator.java
	public class SugarDecorator extends CoffeeDecorator {
		public SugarDecorator(Coffee decoratedCoffee) {
			super(decoratedCoffee);
		}

		@Override
		public String getDescription() {
			return decoratedCoffee.getDescription() + ", Sugar";
		}

		@Override
		public double getCost() {
			return decoratedCoffee.getCost() + 0.2;
		}
	}

// Main.java
public class Main {
    public static void main(String[] args) {
        // Plain Coffee
        Coffee coffee = new PlainCoffee();
        System.out.println("Description: " + coffee.getDescription());
        System.out.println("Cost: $" + coffee.getCost());

        // Coffee with Milk
        Coffee milkCoffee = new MilkDecorator(new PlainCoffee());
        System.out.println("\nDescription: " + milkCoffee.getDescription());
        System.out.println("Cost: $" + milkCoffee.getCost());

        // Coffee with Sugar and Milk
        Coffee sugarMilkCoffee = new SugarDecorator(new MilkDecorator(new PlainCoffee()));
        System.out.println("\nDescription: " + sugarMilkCoffee.getDescription());
        System.out.println("Cost: $" + sugarMilkCoffee.getCost());
    }
}
